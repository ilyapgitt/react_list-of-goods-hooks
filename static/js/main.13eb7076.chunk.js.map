{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortBy","setSortBy","isReversed","setIsReversed","goodsForRender","listOfGoods","copyOfGoods","sort","goodA","goodB","SORT_BY_ALHPABET","localeCompare","SORT_BY_LENGTH","length","reverse","getSortedGoods","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,wBAAAA,E,yBAAAA,E,YAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,SAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA5BR,SAAwBC,EAAxB,GACqD,IAAjDL,EAAgD,EAAhDA,OAAQE,EAAwC,EAAxCA,WACJI,EAAW,YAAOD,GAmBxB,OAjBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKL,EAASe,iBACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,eACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,GACFI,EAAYQ,UAGPR,EAOgBS,CAAenB,EACpC,CAAEI,SAAQE,eAOZ,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WACAlB,IAAWL,EAASe,mBAEtBS,QAAS,kBAAMlB,EAAUN,EAASe,mBANpC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WACAlB,IAAWL,EAASiB,iBAEtBO,QAAS,kBAAMlB,EAAUN,EAASiB,iBANpC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CAAE,YAAahB,IAClDiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAI,OAAKA,MAHxC,sBAOEpB,GAAUE,IACV,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAzCW,WACnBlB,EAAUN,EAASI,SACnBI,GAAc,IAoCR,sBAWJ,6BACGC,EAAeiB,KAAI,SAAAC,GAAI,OACtB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC7GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.13eb7076.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_BY_LENGTH = 'length',\n  SORT_BY_ALHPABET = 'alpha',\n  Default = '',\n}\n\ninterface SortParametres {\n  sortBy: SortType;\n  isReversed: boolean;\n}\n\nfunction getSortedGoods(listOfGoods: string[],\n  { sortBy, isReversed }: SortParametres): string[] {\n  const copyOfGoods = [...listOfGoods];\n\n  if (sortBy) {\n    copyOfGoods.sort((goodA, goodB) => {\n      switch (sortBy) {\n        case SortType.SORT_BY_ALHPABET:\n          return goodA.localeCompare(goodB);\n        case SortType.SORT_BY_LENGTH:\n          return goodA.length - goodB.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    copyOfGoods.reverse();\n  }\n\n  return copyOfGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const goodsForRender = getSortedGoods(goodsFromServer,\n    { sortBy, isReversed });\n\n  const resetFilters = () => {\n    setSortBy(SortType.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light':\n            sortBy !== SortType.SORT_BY_ALHPABET,\n          })}\n          onClick={() => setSortBy(SortType.SORT_BY_ALHPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light':\n            sortBy !== SortType.SORT_BY_LENGTH,\n          })}\n          onClick={() => setSortBy(SortType.SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n        {(sortBy || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetFilters}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goodsForRender.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}